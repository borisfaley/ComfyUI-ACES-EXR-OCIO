import torch
import numpy as np
import os
import urllib.request
import urllib.error
import folder_paths
import hashlib

# OpenImageIO –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù –¥–ª—è EXR
try:
    import OpenImageIO as oiio
    OIIO_AVAILABLE = True
    print("‚úÖ OpenImageIO –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è EXR —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
except ImportError:
    OIIO_AVAILABLE = False
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: OpenImageIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install OpenImageIO")
    print("   –ò–ª–∏: conda install -c conda-forge openimageio")

class ACESEXRSaveOCIO:
    """
    ComfyUI –Ω–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–û–õ–¨–ö–û –≤ EXR ACES —Ñ–æ—Ä–º–∞—Ç–µ —Å OCIO –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    –¢—Ä–µ–±—É–µ—Ç OpenImageIO - –Ω–∏–∫–∞–∫–∏—Ö fallback —Ñ–æ—Ä–º–∞—Ç–æ–≤
    """
    
    def __init__(self):
        if not OIIO_AVAILABLE:
            raise ImportError("OpenImageIO –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è EXR —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install OpenImageIO")
        
        self.output_dir = folder_paths.get_output_directory()
        self.type = "output"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫—ç—à–∞ OCIO –∫–æ–Ω—Ñ–∏–≥–æ–≤
        self.ocio_cache_dir = os.path.join(os.path.dirname(__file__), "ocio_cache")
        os.makedirs(self.ocio_cache_dir, exist_ok=True)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ OCIO URL - –ü–†–ê–í–ò–õ–¨–ù–´–ï!
        self.preset_ocio_urls = {
            "ACES 1.3 CG Config": "https://github.com/AcademySoftwareFoundation/OpenColorIO-Config-ACES/releases/download/v2.1.0-v2.2.0/cg-config-v2.2.0_aces-v1.3_ocio-v2.4.ocio",
            "ACES 1.3 Studio Config": "https://github.com/AcademySoftwareFoundation/OpenColorIO-Config-ACES/releases/download/v2.1.0-v2.2.0/studio-config-v2.2.0_aces-v1.3_ocio-v2.4.ocio",
            "ACES 2.0 CG Config": "https://github.com/AcademySoftwareFoundation/OpenColorIO-Config-ACES/releases/download/v3.0.0/cg-config-v3.0.0_aces-v2.0_ocio-v2.4.ocio",
            "ACES 2.0 Studio Config": "https://github.com/AcademySoftwareFoundation/OpenColorIO-Config-ACES/releases/download/v3.0.0/studio-config-v3.0.0_aces-v2.0_ocio-v2.4.ocio"
        }
        
        # ACES –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è fallback —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ)
        self.SRGB_TO_ACES2065_MATRIX = np.array([
            [0.4395677, 0.3831666, 0.1772656],
            [0.0897923, 0.8134201, 0.0967876], 
            [0.0175439, 0.1115623, 0.8708938]
        ])
        
        self.ACES2065_TO_ACESCG_MATRIX = np.array([
            [1.451439316, -0.236510746, -0.214928570],
            [-0.076553773, 1.176229700, -0.099675927],
            [0.008316148, -0.006032449, 0.997716301]
        ])

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "images": ("IMAGE",),
                "filename_prefix": ("STRING", {"default": "aces_render"}),
                "colorspace": (["ACES2065-1", "ACEScg"], {"default": "ACES2065-1"}),
                "compression": (["none", "zip", "zips", "rle", "piz", "pxr24", "b44", "b44a", "dwaa", "dwab"],
                               {"default": "zip"}),
                "pixel_type": (["half", "float"], {"default": "half"}),
            },
            "optional": {
                "input_colorspace": (["sRGB", "Rec.709", "Linear sRGB", "ACES2065-1", "ACEScg"], 
                                   {"default": "sRGB"}),
                "ocio_config_source": (["Auto", "Local Path", "URL", "Preset"], {"default": "Auto"}),
                "ocio_config_path": ("STRING", {"default": ""}),
                "ocio_config_url": ("STRING", {"default": ""}),
                "ocio_preset": (["ACES 1.3 CG Config", "ACES 1.3 Studio Config", "ACES 2.0 CG Config", "ACES 2.0 Studio Config"], {"default": "ACES 1.3 CG Config"}),
            }
        }
    
    RETURN_TYPES = ("STRING", "STRING")
    RETURN_NAMES = ("exr_path", "conversion_info") 
    FUNCTION = "save_aces_exr"
    OUTPUT_NODE = True
    CATEGORY = "image/ACES"
    
    DESCRIPTION = """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ EXR ACES —Ñ–æ—Ä–º–∞—Ç–µ —Å OCIO –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
    
    ‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ OpenImageIO - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install OpenImageIO
    üéØ –¢–û–õ–¨–ö–û EXR - –Ω–∏–∫–∞–∫–∏—Ö fallback —Ñ–æ—Ä–º–∞—Ç–æ–≤
    ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö OCIO –∫–æ–Ω—Ñ–∏–≥–æ–≤
    ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ACES 1.3 –∏ ACES 2.0
    ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ ACES –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è fallback
    
    ComfyUI IMAGE —Ç–µ–Ω–∑–æ—Ä—ã –æ–±—ã—á–Ω–æ –≤ sRGB –ø–æ—Å–ª–µ VAE decode.
    """

    def download_ocio_config(self, url, filename_hint="config.ocio"):
        """–°–∫–∞—á–∞—Ç—å OCIO –∫–æ–Ω—Ñ–∏–≥ –ø–æ URL –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            print(f"üåê –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å: {url}")
            
            # –°–æ–∑–¥–∞–µ–º hash –æ—Ç URL –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
            cache_filename = f"ocio_{url_hash}_{filename_hint}"
            cache_path = os.path.join(self.ocio_cache_dir, cache_filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if os.path.exists(cache_path):
                file_size = os.path.getsize(cache_path)
                print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCIO config: {cache_filename} ({file_size} bytes)")
                return cache_path
            
            # –î–æ–±–∞–≤–ª—è–µ–º User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            req = urllib.request.Request(url, headers={'User-Agent': 'ComfyUI-ACES-Node/1.0'})
            
            print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º OCIO config...")
            with urllib.request.urlopen(req, timeout=30) as response:
                with open(cache_path, 'wb') as f:
                    f.write(response.read())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π
            file_size = os.path.getsize(cache_path)
            if file_size < 1000:  # OCIO –∫–æ–Ω—Ñ–∏–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 1KB
                os.remove(cache_path)
                raise Exception(f"–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {file_size} bytes")
            
            print(f"‚úÖ OCIO config —Å–∫–∞—á–∞–Ω: {cache_filename} ({file_size} bytes)")
            return cache_path
            
        except urllib.error.HTTPError as e:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {e.code}: {e.reason}")
            print(f"   URL: {url}")
            return None
        except urllib.error.URLError as e:
            print(f"‚ùå URL –æ—à–∏–±–∫–∞: {e.reason}")
            print(f"   URL: {url}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è OCIO config: {e}")
            return None

    def find_or_download_ocio_config(self, source, path, url, preset):
        """–ù–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å OCIO –∫–æ–Ω—Ñ–∏–≥"""
        ocio_config_path = None
        
        if source == "Local Path" and path:
            if os.path.exists(path):
                ocio_config_path = path
                print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π OCIO config: {path}")
            else:
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        
        elif source == "URL" and url:
            print(f"üåê –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ URL...")
            ocio_config_path = self.download_ocio_config(url)
        
        elif source == "Preset":
            preset_url = self.preset_ocio_urls.get(preset)
            if preset_url:
                print(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º preset: {preset}")
                ocio_config_path = self.download_ocio_config(preset_url, f"{preset.lower().replace(' ', '_')}.ocio")
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π preset: {preset}")
        
        elif source == "Auto":
            # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            auto_paths = [
                "./ocio_configs/cg-config-v2.2.0_aces-v1.3_ocio-v2.4.ocio",
                "./ocio_configs/studio-config-v2.2.0_aces-v1.3_ocio-v2.4.ocio",
                "./ocio_configs/config.ocio",
                "./ocio_configs/aces_1.2/config.ocio",
                os.path.expanduser("~/ComfyUI/ocio_configs/cg-config-v2.2.0_aces-v1.3_ocio-v2.4.ocio"),
            ]
            
            for auto_path in auto_paths:
                if os.path.exists(auto_path):
                    ocio_config_path = auto_path
                    print(f"üìÅ –ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π OCIO config: {auto_path}")
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º preset
            if not ocio_config_path:
                print("üì• –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–∫–∞—á–∏–≤–∞–µ–º ACES 1.3 CG Config...")
                preset_url = self.preset_ocio_urls["ACES 1.3 CG Config"]
                ocio_config_path = self.download_ocio_config(preset_url, "aces13_cg.ocio")
        
        return ocio_config_path

    def srgb_to_linear(self, image):
        """sRGB to linear conversion"""
        return np.where(
            image <= 0.04045,
            image / 12.92,
            np.power((image + 0.055) / 1.055, 2.4)
        )

    def matrix_transform(self, image, matrix):
        """–ú–∞—Ç—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞"""
        original_shape = image.shape
        flat_image = image.reshape(-1, 3)
        transformed = np.dot(flat_image, matrix.T)
        return transformed.reshape(original_shape)

    def convert_colorspace(self, image_array, input_cs, output_cs):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ ACES –º–∞—Ç—Ä–∏—Ü—ã"""
        if input_cs == output_cs:
            return image_array, "–ë–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
        
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {input_cs} -> {output_cs}")
        
        if input_cs == "sRGB" and output_cs == "ACES2065-1":
            linear_image = self.srgb_to_linear(image_array)
            result = self.matrix_transform(linear_image, self.SRGB_TO_ACES2065_MATRIX)
            return result, "Matrix: sRGB -> Linear -> ACES2065-1"
        
        elif input_cs == "ACES2065-1" and output_cs == "ACEScg":
            result = self.matrix_transform(image_array, self.ACES2065_TO_ACESCG_MATRIX)
            return result, "Matrix: ACES2065-1 -> ACEScg"
        
        elif input_cs == "sRGB" and output_cs == "ACEScg":
            # –î–≤—É—Ö—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: sRGB -> ACES2065-1 -> ACEScg
            linear_image = self.srgb_to_linear(image_array)
            aces2065 = self.matrix_transform(linear_image, self.SRGB_TO_ACES2065_MATRIX)
            result = self.matrix_transform(aces2065, self.ACES2065_TO_ACESCG_MATRIX)
            return result, "Matrix: sRGB -> Linear -> ACES2065-1 -> ACEScg"
        
        elif input_cs == "Linear sRGB" and output_cs == "ACES2065-1":
            # –ü—Ä—è–º–æ–µ –º–∞—Ç—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ linear sRGB
            result = self.matrix_transform(image_array, self.SRGB_TO_ACES2065_MATRIX)
            return result, "Matrix: Linear sRGB -> ACES2065-1"
        
        else:
            print(f"‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {input_cs} -> {output_cs} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return image_array, f"–ë–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ({input_cs} -> {output_cs} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"

    def tensor_to_numpy(self, tensor):
        """Convert ComfyUI tensor to numpy array"""
        if len(tensor.shape) == 4:
            tensor = tensor.squeeze(0)
        
        array = tensor.cpu().numpy().astype(np.float32)
        # –î–ª—è ACES –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å >1.0)
        array = np.clip(array, 0.0, None)
        
        return array

    def save_exr_aces(self, image_array, filepath, colorspace, compression="zip", pixel_type="half"):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å EXR —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ ACES –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            height, width, channels = image_array.shape
            
            # –°–æ–∑–¥–∞–µ–º ImageSpec —Å –Ω—É–∂–Ω—ã–º —Ç–∏–ø–æ–º –ø–∏–∫—Å–µ–ª–µ–π
            if pixel_type == "half":
                spec = oiio.ImageSpec(width, height, channels, oiio.HALF)
            else:  # float
                spec = oiio.ImageSpec(width, height, channels, oiio.FLOAT)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∂–∞—Ç–∏–µ
            spec.attribute("compression", compression)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ ACES –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            spec.attribute("oiio:ColorSpace", colorspace)
            spec.attribute("ColorSpace", colorspace)
            spec.attribute("Software", "ComfyUI ACES EXR OCIO Node")
            spec.attribute("Description", f"ACES {colorspace} EXR from ComfyUI with OCIO support")
            spec.attribute("ComfyUI:Node", "ACESEXRSaveOCIO")
            spec.attribute("ComfyUI:Workflow", "WAN -> sRGB -> ACES")
            
            if colorspace == "ACES2065-1":
                # ACES2065-1 –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (D60 white point, AP0 primaries)
                spec.attribute("chromaticities", "0.7347,0.2653,0.0000,1.0000,0.0001,-0.0770,0.32168,0.33767")
                spec.attribute("WhitePoint", "D60")
                spec.attribute("primaries", "ACES")
                spec.attribute("Encoding", "ACES2065-1")
                spec.attribute("TransferFunction", "Linear")
                spec.attribute("Gamut", "AP0")
            elif colorspace == "ACEScg":
                # ACEScg –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (D60 white point, AP1 primaries)
                spec.attribute("chromaticities", "0.713,0.293,0.165,0.830,0.128,0.044,0.32168,0.33767")
                spec.attribute("WhitePoint", "D60") 
                spec.attribute("primaries", "ACEScg")
                spec.attribute("Encoding", "ACEScg")
                spec.attribute("TransferFunction", "Linear")
                spec.attribute("Gamut", "AP1")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–π
            min_val, max_val = np.min(image_array), np.max(image_array)
            spec.attribute("OriginalRange", f"[{min_val:.6f}, {max_val:.6f}]")
            
            if max_val > 1.0:
                spec.attribute("HDR", "true")
                spec.attribute("MaxLuminance", f"{max_val:.3f}")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º EXR
            out = oiio.ImageOutput.create(filepath)
            if not out:
                raise RuntimeError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å EXR output –¥–ª—è {filepath}")
            
            if not out.open(filepath, spec):
                raise RuntimeError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å {filepath} –¥–ª—è –∑–∞–ø–∏—Å–∏ EXR")
            
            success = out.write_image(image_array)
            out.close()
            
            if not success:
                raise RuntimeError("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ EXR –¥–∞–Ω–Ω—ã—Ö")
            
            return True, f"EXR {colorspace} ({pixel_type}, {compression}, range: [{min_val:.3f}, {max_val:.3f}])"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ EXR: {e}"

    def save_aces_exr(self, images, filename_prefix, colorspace, compression, pixel_type,
                      input_colorspace="sRGB", ocio_config_source="Auto", ocio_config_path="", 
                      ocio_config_url="", ocio_preset="ACES 1.3 CG Config"):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö ACES EXR"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenImageIO –µ—â–µ —Ä–∞–∑
        if not OIIO_AVAILABLE:
            error_msg = "‚ùå OpenImageIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install OpenImageIO –∏–ª–∏ conda install -c conda-forge openimageio"
            print(error_msg)
            return ("", error_msg)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ–º OCIO config (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
        ocio_config_path_resolved = self.find_or_download_ocio_config(
            ocio_config_source, ocio_config_path, ocio_config_url, ocio_preset
        )
        
        if ocio_config_path_resolved:
            print(f"üìã OCIO config –Ω–∞–π–¥–µ–Ω: {os.path.basename(ocio_config_path_resolved)}")
        else:
            print("üìã OCIO config –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ ACES –º–∞—Ç—Ä–∏—Ü—ã")
        
        saved_files = []
        conversion_infos = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(images.shape) == 4 and images.shape[0] > 1:
            # Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
            total_frames = images.shape[0]
            print(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {total_frames} –∫–∞–¥—Ä–æ–≤...")
            
            for i in range(total_frames):
                image_tensor = images[i]
                image_array = self.tensor_to_numpy(image_tensor)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                converted_array, conv_info = self.convert_colorspace(
                    image_array, input_colorspace, colorspace
                )
                
                # –ò–º—è —Ñ–∞–π–ª–∞
                filename = f"{filename_prefix}_{i:05d}.exr"
                filepath = os.path.join(self.output_dir, filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º EXR
                success, format_info = self.save_exr_aces(
                    converted_array, filepath, colorspace, compression, pixel_type
                )
                
                if success:
                    saved_files.append(filepath)
                    conversion_infos.append(f"Frame {i+1}/{total_frames}: {conv_info} -> {format_info}")
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ EXR: {os.path.basename(filepath)} ({i+1}/{total_frames})")
                else:
                    conversion_infos.append(f"Frame {i+1}/{total_frames}: –û–®–ò–ë–ö–ê - {format_info}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ EXR: frame {i+1} - {format_info}")
        
        else:
            # –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if len(images.shape) == 4:
                image_tensor = images[0]
            else:
                image_tensor = images
            
            image_array = self.tensor_to_numpy(image_tensor)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            converted_array, conv_info = self.convert_colorspace(
                image_array, input_colorspace, colorspace
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º EXR
            filename = f"{filename_prefix}.exr"
            filepath = os.path.join(self.output_dir, filename)
            
            success, format_info = self.save_exr_aces(
                converted_array, filepath, colorspace, compression, pixel_type
            )
            
            if success:
                saved_files.append(filepath)
                conversion_infos.append(f"{conv_info} -> {format_info}")
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ EXR: {os.path.basename(filepath)}")
            else:
                conversion_infos.append(f"–û–®–ò–ë–ö–ê - {format_info}")
                print(f"‚ùå –û—à–∏–±–∫–∞ EXR: {format_info}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        exr_path = saved_files[0] if saved_files else ""
        conversion_info = "\n".join(conversion_infos)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        if saved_files:
            print(f"üéØ –ò–¢–û–ì–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_files)} EXR —Ñ–∞–π–ª–æ–≤ –≤ {colorspace}")
        else:
            print("‚ùå –ò–¢–û–ì–û: –ù–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        return (exr_path, conversion_info)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –¥–ª—è ComfyUI
NODE_CLASS_MAPPINGS = {
    "ACESEXRSaveOCIO": ACESEXRSaveOCIO
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "ACESEXRSaveOCIO": "Save ACES EXR (OCIO)"
}